#!/usr/bin/env python

import os
import click
import shutil
import uuid

import intact.intact as it
import util.log as log
import util.subtypes as st

def get_working_folder(path):
    """
    Returns a default working folder.
    """

    folder = os.path.join(
        path, 
        ".proviral-" + str(uuid.uuid4())
    )

    if not os.path.exists(folder):
        os.makedirs(folder)

    return folder

@click.group()
def cli():
    pass

@cli.command('intact')
@click.argument(
    'input_file', 
    type=click.Path(exists=True, readable=True, resolve_path=True)
)
@click.option(
    '--subtype',
    type=click.Choice(st.subtypes())
)
@click.option(
    '--include-packaging-signal/--exclude-packaging-signal', default=True)
@click.option(
    '--include-rre/--exclude-rre', default=True)
@click.option(
    '--check-major-splice-donor-site/--ignore-major-splice-donor-site', default=True)
@click.option(
    '--run-hypermut/--no-hypermut', default=False
)
@click.option(
    '--check-long-deletion/--ignore-long-deletion', default=False
)
@click.option(
    '--include-small-orfs/--exclude-small-orfs', default=False)
@click.option(
    '--working-folder',
    default=os.getcwd()
)

def intact(input_file, subtype, include_packaging_signal,
           include_rre, check_major_splice_donor_site, run_hypermut,
           check_long_deletion, include_small_orfs, working_folder):
    """
    Check consensus sequences for intactness.
    """

    if subtype is None:
        raise ValueError('Must select a subtype using the --subtype option.')

    log.info('Intactness called.')
    folder = get_working_folder(working_folder)

    try:
        intact_sequences, non_intact_sequences, orfs, errors = it.intact(
            folder, input_file, subtype, include_packaging_signal, include_rre,
            check_major_splice_donor_site, run_hypermut, check_long_deletion,
            include_small_orfs
        )
        log.info('Intact sequences written to ' + intact_sequences)
        log.info('Non-intact sequences written to ' + non_intact_sequences)
        log.info('ORFs for all sequences written to ' + orfs)
        log.info('JSON-encoded intactness error information written to ' 
                + errors)
    except Exception as e:
        shutil.rmtree(folder)
        raise e
    shutil.rmtree(folder)

if __name__ == '__main__':
    cli()
